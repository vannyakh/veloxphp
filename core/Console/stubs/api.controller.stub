<?php

namespace {{namespace}};

use Core\Controller;
use Core\Api\Traits\ApiResponse;
use App\Models\{{model}};
use App\Resources\{{model}}Resource;
use App\Http\Requests\{{model}}\Create{{model}}Request;
use App\Http\Requests\{{model}}\Update{{model}}Request;

class {{className}} extends Controller
{
    use ApiResponse;

    /**
     * @description List all {{model}}s with pagination
     * @return JsonResponse
     */
    public function index()
    {
        $items = {{model}}::query()
            ->filter($this->request->all())
            ->paginate($this->request->get('per_page', 15));

        return $this->success(
            {{model}}Resource::collection($items),
            '{{model}}s retrieved successfully'
        );
    }

    /**
     * @description Create new {{model}}
     * @param Create{{model}}Request $request
     * @return JsonResponse
     */
    public function store(Create{{model}}Request $request)
    {
        if (!$request->validate()) {
            return $this->error('Validation failed', 422, $request->errors());
        }

        $item = {{model}}::create($request->validated());

        return $this->success(
            new {{model}}Resource($item),
            '{{model}} created successfully',
            201
        );
    }

    /**
     * @description Get single {{model}} by ID
     * @param int $id
     * @return JsonResponse
     */
    public function show($id)
    {
        $item = {{model}}::find($id);
        
        if (!$item) {
            return $this->error('{{model}} not found', 404);
        }

        return $this->success(
            new {{model}}Resource($item)
        );
    }

    /**
     * @description Update {{model}} by ID
     * @param int $id
     * @param Update{{model}}Request $request
     * @return JsonResponse
     */
    public function update($id, Update{{model}}Request $request)
    {
        $item = {{model}}::find($id);
        
        if (!$item) {
            return $this->error('{{model}} not found', 404);
        }

        if (!$request->validate()) {
            return $this->error('Validation failed', 422, $request->errors());
        }

        $item->update($request->validated());

        return $this->success(
            new {{model}}Resource($item),
            '{{model}} updated successfully'
        );
    }

    /**
     * @description Delete {{model}} by ID
     * @param int $id
     * @return JsonResponse
     */
    public function destroy($id)
    {
        $item = {{model}}::find($id);
        
        if (!$item) {
            return $this->error('{{model}} not found', 404);
        }

        $item->delete();

        return $this->success(
            null,
            '{{model}} deleted successfully'
        );
    }
} 